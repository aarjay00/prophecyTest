{"initCode":"\n\ndef alteryxOutputColumns(all_columns, columns_to_drop):\n    conflicting_columns = [col.replace(\"in0_\", \"\").replace(\"in1_\", \"\") for col in all_columns]\n    conflicting_columns = set([x for x in conflicting_columns if conflicting_columns.count(x) > 1])\n\n    output_columns = []\n    for col_name in all_columns:\n        original_column_name = col_name.replace(\"in0_\", \"\").replace(\"in1_\", \"\")\n\n        if col_name in columns_to_drop:\n            continue\n        else:\n            if original_column_name in conflicting_columns and col_name.startswith(\"in1_\"):\n                output_columns.append(f\"`in1_{original_column_name}` AS `Right_{original_column_name}`\")\n            elif col_name.startswith(\"in1_\"):\n                output_columns.append(f\"`in1_{original_column_name}` AS `{original_column_name}`\")\n            elif col_name.startswith(\"in0_\"):\n                output_columns.append(f\"`in0_{original_column_name}` AS `{original_column_name}`\")\n            else:\n                output_columns.append(f\"`{original_column_name}` AS `{original_column_name}`\")\n\n    return output_columns\n\ndef textToColumns(exploded_df, input_column, num_cols, rootName, field_separator):\n    split_col_df = exploded_df.withColumn(\"splitCol\", call_spark_fcn(\"splitIntoMultipleColumnsUdf\", col(input_column), lit(field_separator), lit(num_cols)).alias(\"splitCol\"))\n\n    final_df = split_col_df\n    index = -1\n\n    output_schema_columns = [f\"{rootName}{i}\" for i in range(1, num_cols + 1)]\n\n    for column in output_schema_columns:\n        index += 1\n        final_df = final_df.withColumn(column, col(\"splitCol\")[index])\n\n    final_df = final_df.drop(\"splitCol\").drop(input_column)\n    return final_df\n\ndef transposeDataFrame(df, key_columns, data_columns):\n    unpivoted_cols = [col(column) for column in key_columns] + [lit(column).alias(\"Name\") for column in data_columns] + [col(column).alias(\"Value\") for column in data_columns]\n    return df.select(*unpivoted_cols)\n\n\n","code":"\n@udf(returnType=ArrayType(IntegerType()))\ndef generateRowsUdf2704(NumRows: int, RecordNum: int):\n    result = []\n    previous = RecordNum\n    while previous > (RecordNum - NumRows):\n        result.append(previous)\n        previous = int(previous) - 1\n    return result\n"}