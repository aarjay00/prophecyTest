from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.types import *
from prophecy.utils import *
from prophecy.libs import typed_lit
from job.config.ConfigStore import *
from job.udfs.UDFs import *

def KeeponlyvalidrecordIDsforeachGroupBycondition_inner(
        spark: SparkSession,
        in0: DataFrame,
        in1: DataFrame,
) -> DataFrame:
    return in0\
        .alias("in0")\
        .join(
          in1.alias("in1"),
          ((col("in0.MBR_INDV_BE_KEY") == col("in1.MBR_INDV_BE_KEY")) & (col("in0.previous") == col("in1.RecordNum"))),
          "inner"
        )\
        .select(col("in0.E68").alias("E68"), col("in0.M46").alias("M46"), col("in0.O01").alias("O01"), col("in0.Z36").alias("Z36"), col("in0.Z01").alias("Z01"), col("in0.Z19").alias("Z19"), col("in1.E29").alias("E29"), col("in1.E79").alias("E79"), col("in0.Z14").alias("Z14"), col("in0.M17").alias("M17"), col("in0.O30").alias("O30"), col("in0.O35").alias("O35"), col("in0.Z08").alias("Z08"), col("in1.E23").alias("E23"), col("in0.Z05").alias("Z05"), col("in0.RecordNum").alias("RecordNum"), col("in0.Z15").alias("Z15"), col("in0.R10").alias("R10"), col("in1.E01").alias("E01"), col("in1.E75").alias("E75"), col("in0.O34").alias("O34"), col("in0.O04").alias("O04"), col("in1.E30").alias("E30"), col("in1.E41").alias("E41"), col("in1.E68").alias("Right_E68"), col("in1.E07").alias("E07"), col("in1.E86").alias("E86"), col("in0.O22").alias("O22"), col("in0.F31").alias("F31"), col("in1.E64").alias("E64"), col("in1.E45").alias("E45"), col("in0.O07").alias("O07"), col("in1.E53").alias("E53"), col("in0.Z21").alias("Z21"), col("in1.E80").alias("E80"), col("in0.Z32").alias("Z32"), col("in0.M13").alias("M13"), col("in1.E34").alias("E34"), col("in0.R11").alias("R11"), col("in0.R18").alias("R18"), col("in1.E28").alias("E28"), col("in0.previous").alias("previous"), col("in1.E56").alias("E56"), col("in0.Z04").alias("Z04"), col("in1.E89").alias("E89"), col("in1.E02").alias("E02"), col("in1.E78").alias("E78"), col("in0.Z09").alias("Z09"), col("in0.O24").alias("O24"), col("in1.E42").alias("E42"), col("in0.R14").alias("R14"), col("in0.M18").alias("M18"), col("in0.M45").alias("M45"), col("in1.E52").alias("E52"), col("in0.Z00").alias("Z00"), col("in0.M42").alias("M42"), col("in0.R13").alias("R13"), col("in1.E67").alias("E67"), col("in0.F32").alias("F32"), col("in0.O36").alias("O36"), col("in1.E20").alias("E20"), col("in0.O21").alias("O21"), col("in0.R17").alias("R17"), col("in1.E63").alias("E63"), col("in0.M12").alias("M12"), col("in1.E35").alias("E35"), col("in0.Z13").alias("Z13"), col("in0.O33").alias("O33"), col("in0.O03").alias("O03"), col("in0.YEARMONTH").alias("YEARMONTH"), col("in1.E24").alias("E24"), col("in1.E13").alias("E13"), col("in1.E70").alias("E70"), col("in1.E46").alias("E46"), col("in1.E06").alias("E06"), col("in1.E74").alias("E74"), col("in1.E31").alias("E31"), col("in1.E85").alias("E85"), col("in0.M14").alias("M14"), col("in0.Z03").alias("Z03"), col("in0.M41").alias("M41"), col("in1.E16").alias("E16"), col("in1.E09").alias("E09"), col("in0.F39").alias("F39"), col("in0.M47").alias("M47"), col("in1.E55").alias("E55"), col("in0.Z38").alias("Z38"), col("in1.E50").alias("E50"), col("in1.E88").alias("E88"), col("in1.E27").alias("E27"), col("in0.O25").alias("O25"), col("in0.F33").alias("F33"), col("in1.E66").alias("E66"), col("in1.E77").alias("E77"), col("in0.M19").alias("M19"), col("in1.E51").alias("E51"), col("in1.E21").alias("E21"), col("in0.Z3A").alias("Z3A"), col("in0.Z34").alias("Z34"), col("in1.E71").alias("E71"), col("in1.E36").alias("E36"), col("in0.Z39").alias("Z39"), col("in1.E10").alias("E10"), col("in0.Z28").alias("Z28"), col("in1.E60").alias("E60"), col("in0.Z12").alias("Z12"), col("in0.O09").alias("O09"), col("in1.E25").alias("E25"), col("in0.M15").alias("M15"), col("in0.O28").alias("O28"), col("in0.O02").alias("O02"), col("in0.Z30").alias("Z30"), col("in0.Z23").alias("Z23"), col("in0.M48").alias("M48"), col("in0.M11").alias("M11"), col("in1.E05").alias("E05"), col("in1.E32").alias("E32"), col("in0.O32").alias("O32"), col("in0.R16").alias("R16"), col("in0.Z17").alias("Z17"), col("in1.E43").alias("E43"), col("in1.E03").alias("E03"), col("in0.O00").alias("O00"), col("in1.E59").alias("E59"), col("in0.MBR_INDV_BE_KEY").alias("MBR_INDV_BE_KEY"), col("in0.Z18").alias("Z18"), col("in0.Z31").alias("Z31"), col("in0.O26").alias("O26"), col("in0.R19").alias("R19"), col("in1.E08").alias("E08"), col("in0.M1A").alias("M1A"), col("in0.M10").alias("M10"), col("in0.M16").alias("M16"), col("in0.Z20").alias("Z20"), col("in1.E58").alias("E58"), col("in0.O29").alias("O29"), col("in0.Z37").alias("Z37"), col("in1.E84").alias("E84"), col("in1.E15").alias("E15"), col("in0.O08").alias("O08"), col("in1.E73").alias("E73"), col("in0.Z29").alias("Z29"), col("in0.O20").alias("O20"), col("in1.E26").alias("E26"), col("in0.M40").alias("M40"), col("in1.E11").alias("E11"), col("in1.E00").alias("E00"), col("in1.E76").alias("E76"), col("in0.O31").alias("O31"), col("in0.F30").alias("F30"), col("in1.E40").alias("E40"), col("in0.M49").alias("M49"), col("in1.E61").alias("E61"), col("in0.R12").alias("R12"), col("in0.M43").alias("M43"), col("in1.E22").alias("E22"), col("in0.NumRows").alias("NumRows"), col("in0.O23").alias("O23"), col("in0.R15").alias("R15"), col("in1.E72").alias("E72"), col("in1.E44").alias("E44"), col("in1.E04").alias("E04"), col("in1.E87").alias("E87"), col("in0.Z11").alias("Z11"), col("in0.Z22").alias("Z22"), col("in1.E83").alias("E83"), col("in0.F34").alias("F34"), col("in1.E54").alias("E54"), col("in0.Z02").alias("Z02"), col("in0.Z16").alias("Z16"), col("in1.E65").alias("E65"), col("in0.Z33").alias("Z33"))
