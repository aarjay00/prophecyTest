{"initCode":"","code":" udf((JobName: String) => {\n    var AdjustDaysFri: Any = null\n    var LWDINTdate: Any = null\n    var ANS2: Any = null\n    var ToDay: Any = null\n    var dteRunDate: Any = null\n    var ANS10: Any = null\n    var sNextLine: Any = null\n    var NextMonth1: Any = null\n    var arpPASSWD: Any = null\n    var CurDateStr: Any = null\n    var CurTimeStr: Any = null\n    var NextMonthNew1: Any = null\n    var AdjustDaysTue: Any = null\n    var ANS13: Any = null\n    var CurDate: Any = null\n    var strDayName: Any = null\n    var sExt: Any = null\n    var TEMP1: Any = null\n    var DaysDiff: Any = null\n    var StartOfyear: Any = null\n    var sFileList: Any = null\n    var W6date: Any = null\n    var DayOfWeek_small: Any = null\n    var Day: Any = null\n    var WorkingDayToRun: Any = null\n    var Cmd: Any = null\n    var AdjustDaysMon: Any = null\n    var DayOfWeek: Any = null\n    var intdate21: Any = null\n    var CurMins: Any = null\n    var AdjustDaysSat: Any = null\n    var FirstDayOfMonth: Any = null\n    var Ans: Any = null\n    var arpSCHEMA: Any = null\n    var CurDateReformat: Any = null\n    var sEXIT: Any = null\n    var DayOf1stOfMonth: Any = null\n    var NextQuarter1: Any = null\n    var intOccurance: Any = null\n    var WKDCount: Any = null\n    var intdate2: Any = null\n    var WKBdate: Any = null\n    var LWDdate: Any = null\n    var Curparam: Any = null\n    var ThisYear: Any = null\n    var FirstDayOfWeek: Any = null\n    var WorkYear1: Any = null\n    var LCDInt: Any = null\n    var StartOfQuarter: Any = null\n    var AdjustDaysWed: Any = null\n    var NextRun: Any = null\n    var arpRUNDATE: Any = null\n    var StartOfMonth: Any = null\n    var sExtList: Any = null\n    var NextOrderDay: Any = null\n    var MidMonth: Any = null\n    var sPXEnginePath: Any = null\n    var arpFREQ: Any = null\n    var RunDate: Any = null\n    var NextYear: Any = null\n    var ordinalpart: Any = null\n    var WorkingDayCounter: Any = null\n    var NextHalf: Any = null\n    var AdjustDaysThu: Any = null\n    var intdate: Any = null\n    var EndTimeStamp: Any = null\n    var NextMonth: Any = null\n    var RunYear: Any = null\n    var Res: Any = null\n    var FirstNextMonth: Any = null\n    var ANS4: Any = null\n    var arpDWDBNAME: Any = null\n    var arpRRUNID: Any = null\n    var AdjustDaysSun: Any = null\n    var IStartoftheNextMonth: Any = null\n    var YERInt: Any = null\n    var QTLInt: Any = null\n    var Temp: Any = null\n    var ANS5: Any = null\n    var WorkMonth1: Any = null\n    var NewNextRun: Any = null\n    var intRunDate: Any = null\n    var WeeklyRun: Any = null\n    var ANS3: Any = null\n    var NextDay: Any = null\n    var Parameterlist: Any = null\n    var CurSecs: Any = null\n    var Freqday: Any = null\n    var Freqdate: Any = null\n    var sLOGIN: Any = null\n    var CurHrs: Any = null\n    var Q01Int: Any = null\n    var arpUSER: Any = null\n    var MMDate: Any = null\n    var IsWorkingDay: Any = null\n    var arpRUNID: Any = null\n    var intdate23: Any = null\n    var intDayOfWeek: Any = null\n    var InternalNextMonth: Any = null\n    var WorkMonth2: Any = null\n    var ANS11: Any = null\n    var cmd: Any = null\n    var NextRunDay: Any = null\n    var sSQL: Any = null\n    var StartOfMonth1: Any = null\n    var Counter: Any = null\n    var NextQuarter: Any = null\n    var LookAhead: Any = null\n    var FirstDayCurrentMonth: Any = null\n    var WorkYear: Any = null\n    var ANS12: Any = null\n    var NewSeq: Any = null\n    var ANS1: Any = null\n    var LWDInt: Any = null\n    def newrec() = {\n      InternalNextMonth = iconv(arpRUNDATE, \"yyyy-MM-dd\")\n      NextMonth =\n        iconv(oconv(InternalNextMonth + 40.0, \"yyyy-MM-dd\"), \"yyyy-MM-dd\")\n      dsu.addmonths(\n        NextMonthNew,\n        oconv(InternalNextMonth, \"yyyy-MM-dd\"),\n        1.0,\n        \"-YMD[4,2,2]\",\n        \"-YMD[4,2,2]\",\n        0.0\n      )\n      NextMonthNew1 = iconv(NextMonthNew, \"yyyy-MM-dd\")\n      NextQuarter =\n        iconv(oconv(InternalNextMonth + 100.0, \"yyyy-MM-dd\"), \"yyyy-MM-dd\")\n      FirstDayCurrentMonth =\n        ds_string_concat(oconv(InternalNextMonth, \"D-YM[4,2]\"), \"-01\")\n      StartOfMonth = ds_string_concat(oconv(NextMonth, \"D-YM[4,2]\"), \"-01\")\n      StartOfMonth1 = ds_string_concat(oconv(NextMonthNew1, \"D-YM[4,2]\"), \"-01\")\n      StartOfQuarter = ds_string_concat(oconv(NextQuarter, \"D-YM[4,2]\"), \"-01\")\n      NextRun = iconv(arpRUNDATE, \"yyyy-MM-dd\") + 1.0\n      WorkYear = oconv(NextRun, \"D-Y\")\n      WeeklyRun = iconv(arpRUNDATE, \"yyyy-MM-dd\") + 7.0\n      MidMonth = ds_string_concat(oconv(NextMonthNew1, \"D-YM[4,2]\"), \"-15\")\n      RunDate = iconv(MidMonth, \"yyyy-MM-dd\")\n      Day = oconv(RunDate, \"DWA\")\n      ThisYear = oconv(InternalNextMonth, \"D-Y[4]\")\n      NextMonth1 = oconv(\n        iconv(\n          datastage_date_add(oconv(InternalNextMonth, \"D-M[2]\"), 1.0),\n          \"D-M[2]\"\n        ),\n        \"D-M[2]\"\n      )\n      NextQuarter1 = oconv(\n        iconv(\n          datastage_date_add(oconv(InternalNextMonth, \"D-M[2]\"), 3.0),\n          \"D-M[2]\"\n        ),\n        \"D-M[2]\"\n      )\n      ToDay = oconv(InternalNextMonth, \"D-D[2]\")\n      NextYear =\n        iconv(oconv(InternalNextMonth + 380.0, \"yyyy-MM-dd\"), \"yyyy-MM-dd\")\n      StartOfyear = ds_string_concat(oconv(NextYear, \"D-YM[4,2]\"), \"-01\")\n\n      CONST_TRUE match {\n        case arpFREQ == \"DLY\" =>\n          Ans = oconv(NextRun, \"yyyy-MM-dd\")\n        case arpFREQ == \"ADH\" =>\n          Ans = oconv(NextRun, \"yyyy-MM-dd\")\n        case arpFREQ == \"ANY\" =>\n          Ans = \"Y\"\n        case arpFREQ == \"LCD\" =>\n          LCDInt = iconv(StartOfMonth, \"yyyy-MM-dd\")\n          Ans = oconv(LCDInt - 1.0, \"yyyy-MM-dd\")\n        case arpFREQ == \"YER\" =>\n          YERInt = iconv(StartOfyear, \"yyyy-MM-dd\")\n          Ans = oconv(YERInt - 1.0, \"yyyy-MM-dd\")\n        case arpFREQ == \"QTY\" =>\n          QTLInt = iconv(StartOfQuarter, \"yyyy-MM-dd\")\n          Ans = oconv(QTLInt - 1.0, \"yyyy-MM-dd\")\n        case arpFREQ == \"Q01\" =>\n          Q01Int = iconv(StartOfQuarter, \"yyyy-MM-dd\")\n          Ans = oconv(Q01Int - 0.0, \"yyyy-MM-dd\")\n        case (arpFREQ == ds_string_concat(\"Q\", ToDay)) && (ToDay > \"01\") =>\n          if (NextQuarter1 != \"\") {\n            Ans = ds_string_concat(\n              ds_string_concat(\n                ds_string_concat(ds_string_concat(ThisYear, \"-\"), NextQuarter1),\n                \"-\"\n              ),\n              ToDay\n            )\n           else\n            Ans = ds_string_concat(\n              ds_string_concat(\n                ds_string_concat(ds_string_concat(ThisYear + 1.0, \"-\"), \"01\"),\n                \"-\"\n              ),\n              ToDay\n            )\n          Ans\n        case arpFREQ == \"QWD\" =>\n          LWDInt = iconv(StartOfQuarter, \"yyyy-MM-dd\")\n          Freqdate = oconv(LWDInt - 1.0, \"yyyy-MM-dd\")\n          LWDdate = Freqdate\n          Freqday = oconv(iconv(LWDdate, \"yyyy-MM-dd\"), \"DWA\")\n          if (((Freqday == \"MONDAY\") || \"SUNDAY\") || \"MONDAY\") {\n\n            CONST_TRUE match {\n              case Freqday == \"MONDAY\" =>\n                LWDINTdate = iconv(Freqdate, \"yyyy-MM-dd\")\n                LWDdate = oconv(LWDINTdate - 3.0, \"yyyy-MM-dd\")\n              case Freqday == \"SUNDAY\" =>\n                LWDINTdate = iconv(Freqdate, \"yyyy-MM-dd\")\n                LWDdate = oconv(LWDINTdate - 2.0, \"yyyy-MM-dd\")\n              case Freqday == \"SATURDAY\" =>\n                LWDINTdate = iconv(Freqdate, \"yyyy-MM-dd\")\n                LWDdate = oconv(LWDINTdate - 1.0, \"yyyy-MM-dd\")\n\n            }\n\n          } else {}\n          WorkYear1 = oconv(LWDdate, \"D-Y[4]\")\n          dsu.getholidaysuk(HolList, WorkYear1, \"E\")\n          if (locate2(LWDdate, ds_list_semicolon(HolList, bhol))) {\n            LWDInt = iconv(LWDdate, \"yyyy-MM-dd\")\n            LWDdate = oconv(LWDINTdate - 1.0, \"yyyy-MM-dd\")\n          } else {}\n          Ans = LWDdate\n        case arpFREQ == \"W-1\" =>\n          LookAhead = NextRun + 1.0\n          NextRunDay = oconv(NextRun, \"D-YMD[4,2,2]\")\n          Ans = NextRunDay\n          NewNextRun = NextRun\n          Freqday = oconv(NextRun, \"DWA\")\n          if (Freqday == \"FRIDAY\") {\n            NewNextRun = NextRun + 2.0\n            LookAhead = LookAhead + 2.0\n          } else {}\n          if (Freqday == \"SATURDAY\") {\n            NewNextRun = NextRun + 1.0\n            LookAhead = LookAhead + 1.0\n          } else {}\n          Ans = oconv(NewNextRun, \"D-YMD[4,2,2]\")\n          WorkYear1 = oconv(LookAhead, \"D-Y[4]\")\n          dsu.getholidaysuk(HolList, WorkYear1, \"E\")\n          if (locate2(LookAhead, ds_list_semicolon(HolList, bhol))) {\n            NewNextRun = NewNextRun + 1.0\n            LookAhead = LookAhead + 1.0\n            Ans = oconv(NewNextRun, \"D-YMD[4,2,2]\")\n            Freqday = oconv(NewNextRun, \"DWA\")\n            if (Freqday == \"FRIDAY\") {\n              NewNextRun = NewNextRun + 2.0\n              LookAhead = LookAhead + 2.0\n            } else {}\n            if (Freqday == \"SATURDAY\") {\n              NewNextRun = NewNextRun + 1.0\n              LookAhead = LookAhead + 1.0\n            } else {}\n            Ans = oconv(NewNextRun, \"D-YMD[4,2,2]\")\n            WorkYear1 = oconv(LookAhead, \"D-Y[4]\")\n            dsu.getholidaysuk(HolList, WorkYear1, \"E\")\n            if (locate2(LookAhead, ds_list_semicolon(HolList, bhol))) {\n              NewNextRun = NewNextRun + 1.0\n              LookAhead = LookAhead + 1.0\n              Ans = oconv(NewNextRun, \"D-YMD[4,2,2]\")\n              Freqday = oconv(NewNextRun, \"DWA\")\n              if (Freqday == \"FRIDAY\") {\n                NewNextRun = NewNextRun + 2.0\n                LookAhead = LookAhead + 2.0\n              } else {}\n              if (Freqday == \"SATURDAY\") {\n                NewNextRun = NewNextRun + 1.0\n                LookAhead = LookAhead + 1.0\n              } else {}\n              Ans = oconv(NewNextRun, \"D-YMD[4,2,2]\")\n            } else {}\n          } else {}\n        case arpFREQ == \"LWD\" =>\n          LWDInt = iconv(StartOfMonth, \"yyyy-MM-dd\")\n          Freqdate = oconv(LWDInt - 1.0, \"yyyy-MM-dd\")\n          LWDdate = Freqdate\n          Freqday = oconv(iconv(LWDdate, \"yyyy-MM-dd\"), \"DWA\")\n          if (((Freqday == \"MONDAY\") || \"SUNDAY\") || \"MONDAY\") {\n\n            CONST_TRUE match {\n              case Freqday == \"MONDAY\" =>\n                LWDINTdate = iconv(Freqdate, \"yyyy-MM-dd\")\n                LWDdate = oconv(LWDINTdate - 3.0, \"yyyy-MM-dd\")\n              case Freqday == \"SUNDAY\" =>\n                LWDINTdate = iconv(Freqdate, \"yyyy-MM-dd\")\n                LWDdate = oconv(LWDINTdate - 2.0, \"yyyy-MM-dd\")\n              case Freqday == \"SATURDAY\" =>\n                LWDINTdate = iconv(Freqdate, \"yyyy-MM-dd\")\n                LWDdate = oconv(LWDINTdate - 1.0, \"yyyy-MM-dd\")\n\n            }\n\n          } else {}\n          WorkYear1 = oconv(LWDdate, \"D-Y[4]\")\n          dsu.getholidaysuk(HolList, WorkYear1, \"E\")\n          if (locate2(LWDdate, ds_list_semicolon(HolList, bhol))) {\n            LWDInt = iconv(LWDdate, \"yyyy-MM-dd\")\n            LWDdate = oconv(LWDINTdate - 1.0, \"yyyy-MM-dd\")\n          } else {}\n          Ans = LWDdate\n        case arpFREQ == \"WKD\" =>\n          NextRunDay = oconv(NextRun, \"D-YMD[4,2,2]\")\n          dsu.nextworkingday(thedate, NextRunDay, \"D-YMD[4,2,2]\")\n          WorkYear1 = oconv(thedate, \"D-Y[4]\")\n          dsu.getholidaysuk(HolList, WorkYear1, \"E\")\n          Ans = oconv(thedate, \"D-YMD[4,2,2]\")\n          if (locate2(thedate, ds_list_semicolon(HolList, bhol))) {\n            intdate = thedate + 1.0\n            Ans = oconv(intdate, \"D-YMD[4,2,2]\")\n            dsu.nextworkingday(thedate2, Ans, \"D-YMD[4,2,2]\")\n            Ans = oconv(thedate2, \"D-YMD[4,2,2]\")\n            WorkYear1 = oconv(thedate2, \"D-Y[4]\")\n            dsu.getholidaysuk(HolList2, WorkYear1, \"E\")\n            if (locate2(thedate2, ds_list_semicolon(HolList2, bhol2))) {\n              intdate2 = thedate2 + 1.0\n              Ans = oconv(intdate2, \"D-YMD[4,2,2]\")\n              dsu.nextworkingday(thedate2, Ans, \"D-YMD[4,2,2]\")\n              Ans = oconv(thedate2, \"D-YMD[4,2,2]\")\n            } else {}\n          } else {}\n        case arpFREQ == \"WME\" =>\n          NextRunDay = oconv(NextRun, \"D-YMD[4,2,2]\")\n          dsu.nextworkingday(thedate, NextRunDay, \"D-YMD[4,2,2]\")\n          WorkYear1 = oconv(thedate, \"D-Y[4]\")\n          dsu.getholidaysuk(HolList, WorkYear1, \"E\")\n          Ans = oconv(thedate, \"D-YMD[4,2,2]\")\n          if (locate2(thedate, ds_list_semicolon(HolList, bhol))) {\n            intdate = thedate + 1.0\n            Ans = oconv(intdate, \"D-YMD[4,2,2]\")\n            dsu.nextworkingday(thedate2, Ans, \"D-YMD[4,2,2]\")\n            Ans = oconv(thedate2, \"D-YMD[4,2,2]\")\n            WorkYear1 = oconv(thedate2, \"D-Y[4]\")\n            dsu.getholidaysuk(HolList2, WorkYear1, \"E\")\n            if (locate2(thedate2, ds_list_semicolon(HolList2, bhol2))) {\n              intdate2 = thedate2 + 1.0\n              Ans = oconv(intdate2, \"D-YMD[4,2,2]\")\n              dsu.nextworkingday(thedate2, Ans, \"D-YMD[4,2,2]\")\n              Ans = oconv(thedate2, \"D-YMD[4,2,2]\")\n            } else {}\n          } else {}\n          WorkMonth1 = oconv(iconv(NextRunDay, \"D-YMD\"), \"D-M[2]\")\n          WorkMonth2 = oconv(iconv(Ans, \"D-YMD[4,2,2]\"), \"D-M[2]\")\n          TEMP1 = iconv(Ans, \"D-YMD[4,2,2]\")\n          if (WorkMonth1 != WorkMonth2) {\n            IStartoftheNextMonth = iconv(\n              ds_string_concat(oconv(TEMP1, \"D-YM[4,2]\"), \"-01\"),\n              \"yyyy-MM-dd\"\n            )\n            Ans = oconv(IStartoftheNextMonth - 1.0, \"yyyy-MM-dd\")\n          } else {}\n        case arpFREQ == \"WKC\" =>\n          NextRunDay = oconv(NextRun, \"D-YMD[4,2,2]\")\n          dsu.nextworkingday(thedate, NextRunDay, \"D-YMD[4,2,2]\")\n          Ans = oconv(thedate, \"D-YMD[4,2,2]\")\n          Temp = oconv(thedate, \"D-MD[2,2]\")\n          if ((Temp == \"12-25\") || (Temp == \"01-01\")) {\n            intdate = thedate + 1.0\n            Ans = oconv(intdate, \"D-YMD[4,2,2]\")\n            dsu.nextworkingday(thedate, Ans, \"D-YMD[4,2,2]\")\n            Ans = oconv(thedate, \"D-YMD[4,2,2]\")\n          } else {}\n        case arpFREQ == \"WKB\" =>\n          Freqday = oconv(NextRun, \"DWA\")\n          if (Freqday == \"SATURDAY\") {\n            WKBdate = oconv(NextRun + 2.0, \"yyyy-MM-dd\")\n          } else WKBdate = oconv(NextRun, \"yyyy-MM-dd\")\n          Ans = WKBdate\n        case (arpFREQ == ds_string_concat(ToDay, \"M\")) && (ToDay < \"29\") =>\n          if (NextMonth1 != \"\") {\n            Ans = ds_string_concat(\n              ds_string_concat(\n                ds_string_concat(ds_string_concat(ThisYear, \"-\"), NextMonth1),\n                \"-\"\n              ),\n              ToDay\n            )\n          } else\n            Ans = ds_string_concat(\n              ds_string_concat(\n                ds_string_concat(ds_string_concat(ThisYear + 1.0, \"-\"), \"01\"),\n                \"-\"\n              ),\n              ToDay\n            )\n          Ans\n        case arpFREQ == \"DLM\" =>\n          Freqday = oconv(NextRun, \"DWA\")\n          if (Freqday == \"MONDAY\") {\n            WKBdate = oconv(NextRun + 1.0, \"yyyy-MM-dd\")\n          } else WKBdate = oconv(NextRun, \"yyyy-MM-dd\")\n          Ans = WKBdate\n        case arpFREQ == \"WK6\" =>\n          Freqday = oconv(NextRun, \"DWA\")\n          if (Freqday == \"SUNDAY\") {\n            W6date = oconv(NextRun + 1.0, \"yyyy-MM-dd\")\n          } else W6date = oconv(NextRun, \"yyyy-MM-dd\")\n          Ans = W6date\n        case arpFREQ == \"WKL\" =>\n          Ans = oconv(WeeklyRun, \"yyyy-MM-dd\")\n        case arpFREQ == \"M6M\" =>\n          if ((arpFREQ == \"M6M\") && (Day == \"MONDAY\")) {\n            MMDate = oconv(RunDate - 2.0, \"yyyy-MM-dd\")\n          } else {}\n          if ((arpFREQ == \"M6M\") && (Day == \"TUESDAY\")) {\n            MMDate = oconv(RunDate - 3.0, \"yyyy-MM-dd\")\n          } else {}\n          if ((arpFREQ == \"M6M\") && (Day == \"WEDNESDAY\")) {\n            MMDate = oconv(RunDate + 3.0, \"yyyy-MM-dd\")\n          } else {}\n          if ((arpFREQ == \"M6M\") && (Day == \"THURSDAY\")) {\n            MMDate = oconv(RunDate + 2.0, \"yyyy-MM-dd\")\n          } else {}\n          if ((arpFREQ == \"M6M\") && (Day == \"FRIDAY\")) {\n            MMDate = oconv(RunDate + 1.0, \"yyyy-MM-dd\")\n          } else {}\n          if ((arpFREQ == \"M6M\") && (Day == \"SATURDAY\")) {\n            MMDate = oconv(RunDate, \"yyyy-MM-dd\")\n          } else {}\n          if ((arpFREQ == \"M6M\") && (Day == \"SUNDAY\")) {\n            MMDate = oconv(RunDate - 1.0, \"yyyy-MM-dd\")\n          } else {}\n          Ans = MMDate\n        case arpFREQ == \"4WD\" =>\n          NextRunDay = oconv(NextRun, \"D-YMD[4,2,2]\")\n          Freqday = oconv(NextRun, \"DWA\")\n          dsloginfo(\n            ds_string_concat(\"The NextRunday Freqday is \", Freqday),\n            ProgramName\n          )\n          dsloginfo(\n            ds_string_concat(\"NextRunDay value is \", NextRunDay),\n            ProgramName\n          )\n          dsu.nextworkingday(thedate, NextRunDay, \"D-YMD[4,2,2]\")\n          WorkYear1 = oconv(thedate, \"D-Y[4]\")\n          dsu.getholidaysuk(HolList, WorkYear1, \"E\")\n          ANS1 = oconv(thedate, \"D-YMD[4,2,2]\")\n          dsloginfo(ds_string_concat(\"ANS1 value is \", ANS1), ProgramName)\n          Ans = oconv(thedate, \"D-YMD[4,2,2]\")\n          if (locate2(thedate, ds_list_semicolon(HolList, bhol))) {\n            intdate = thedate + 1.0\n            ANS2 = oconv(intdate, \"D-YMD[4,2,2]\")\n            dsloginfo(\n              ds_string_concat(\n                ds_string_concat(ds_string_concat(\"ANS2 \", ANS2), \"is \"),\n                ANS2\n              ),\n              ProgramName\n            )\n            Ans = oconv(intdate, \"D-YMD[4,2,2]\")\n            dsu.nextworkingday(thedate2, Ans, \"D-YMD[4,2,2]\")\n            ANS3 = oconv(thedate2, \"D-YMD[4,2,2]\")\n            dsloginfo(\n              ds_string_concat(\n                ds_string_concat(ds_string_concat(\"ANS3 \", ANS3), \"is \"),\n                ANS3\n              ),\n              ProgramName\n            )\n            Ans = oconv(thedate2, \"D-YMD[4,2,2]\")\n            WorkYear1 = oconv(thedate2, \"D-Y[4]\")\n            dsu.getholidaysuk(HolList2, WorkYear1, \"E\")\n            if (locate2(thedate2, ds_list_semicolon(HolList2, bhol2))) {\n              intdate21 = thedate2 + 1.0\n              ANS4 = oconv(intdate21, \"D-YMD[4,2,2]\")\n              dsloginfo(\n                ds_string_concat(\n                  ds_string_concat(ds_string_concat(\"ANS4 \", ANS4), \"is \"),\n                  ANS4\n                ),\n                ProgramName\n              )\n              Ans = oconv(intdate21, \"D-YMD[4,2,2]\")\n            } else {}\n          } else {}\n          NextRunDay = FirstDayCurrentMonth\n          dsloginfo(\n            ds_string_concat(\n              \"NextRunDay value is at the initial level  is \",\n              NextRunDay\n            ),\n            ProgramName\n          )\n          WKDCount = 0.0\n\n          while (ds_not(WKDCount > 4.0)) {\n            dsu.nextworkingday(thedate, NextRunDay, \"D-YMD[4,2,2]\")\n            WorkYear1 = oconv(thedate, \"D-Y[4]\")\n            dsu.getholidaysuk(HolList, WorkYear1, \"E\")\n            ANS5 = oconv(thedate, \"D-YMD[4,2,2]\")\n            dsloginfo(ds_string_concat(\"ANS5 value is \", ANS5), ProgramName)\n            Ans = oconv(thedate, \"D-YMD[4,2,2]\")\n            NextDay = iconv(Ans, \"yyyy-MM-dd\") + 1.0\n            NextRunDay = oconv(NextDay, \"D-YMD[4,2,2]\")\n            if (locate2(thedate, ds_list_semicolon(HolList, bhol))) {\n              intdate = thedate + 1.0\n              Ans = oconv(intdate, \"D-YMD[4,2,2]\")\n              NextDay = iconv(Ans, \"yyyy-MM-dd\") + 1.0\n              NextRunDay = oconv(NextDay, \"D-YMD[4,2,2]\")\n              dsu.nextworkingday(thedate2, Ans, \"D-YMD[4,2,2]\")\n              WorkYear1 = oconv(thedate2, \"D-Y[4]\")\n              dsu.getholidaysuk(HolList2, WorkYear1, \"E\")\n              if (locate2(thedate2, ds_list_semicolon(HolList2, bhol2))) {\n                intdate2 = thedate2 + 1.0\n                Ans = oconv(intdate2, \"D-YMD[4,2,2]\")\n                NextDay = iconv(Ans, \"yyyy-MM-dd\") + 1.0\n                NextRunDay = oconv(NextDay, \"D-YMD[4,2,2]\")\n              } else {}\n            } else {}\n            dsloginfo(\n              ds_string_concat(\n                ds_string_concat(\n                  ds_string_concat(\"NextRunDay value after the \", WKDCount),\n                  \"Iteration is \"\n                ),\n                NextRunDay\n              ),\n              ProgramName\n            )\n            WKDCount = WKDCount + 1.0\n          }\n\n          dsloginfo(\n            ds_string_concat(\n              \"The Final value of ANS5 after the Loop is \",\n              ANS5\n            ),\n            ProgramName\n          )\n          dsloginfo(\n            \"Comparision between ANS1 value with ANS5 value to get the final NextRundate \",\n            ProgramName\n          )\n          if (ANS5 > ANS1) {\n            Ans = ANS1\n          } else {\n            LCDInt = iconv(StartOfMonth, \"yyyy-MM-dd\")\n            FirstNextMonth = oconv(LCDInt, \"yyyy-MM-dd\")\n            dsloginfo(\n              ds_string_concat(\"FirstdayofNextMonth value is \", FirstNextMonth),\n              ProgramName\n            )\n            dsu.nextworkingday(thedate, FirstNextMonth, \"D-YMD[4,2,2]\")\n            WorkYear1 = oconv(thedate, \"D-Y[4]\")\n            dsu.getholidaysuk(HolList, WorkYear1, \"E\")\n            ANS10 = oconv(thedate, \"D-YMD[4,2,2]\")\n            dsloginfo(ds_string_concat(\"ANS10 value is \", ANS10), ProgramName)\n            Ans = oconv(thedate, \"D-YMD[4,2,2]\")\n            if (locate2(thedate, ds_list_semicolon(HolList, bhol))) {\n              intdate = thedate + 1.0\n              ANS11 = oconv(intdate, \"D-YMD[4,2,2]\")\n              dsloginfo(\n                ds_string_concat(\n                  ds_string_concat(ds_string_concat(\"ANS11 \", ANS11), \"is \"),\n                  ANS11\n                ),\n                ProgramName\n              )\n              Ans = oconv(intdate, \"D-YMD[4,2,2]\")\n              dsu.nextworkingday(thedate2, Ans, \"D-YMD[4,2,2]\")\n              ANS12 = oconv(thedate2, \"D-YMD[4,2,2]\")\n              dsloginfo(\n                ds_string_concat(\n                  ds_string_concat(ds_string_concat(\"ANS12 \", ANS12), \"is \"),\n                  ANS12\n                ),\n                ProgramName\n              )\n              Ans = oconv(thedate2, \"D-YMD[4,2,2]\")\n              WorkYear1 = oconv(thedate2, \"D-Y[4]\")\n              dsu.getholidaysuk(HolList2, WorkYear1, \"E\")\n              if (locate2(thedate2, ds_list_semicolon(HolList2, bhol2))) {\n                intdate23 = thedate2 + 1.0\n                ANS13 = oconv(intdate23, \"D-YMD[4,2,2]\")\n                dsloginfo(\n                  ds_string_concat(\n                    ds_string_concat(ds_string_concat(\"ANS13 \", ANS13), \"is \"),\n                    ANS13\n                  ),\n                  ProgramName\n                )\n                Ans = oconv(intdate23, \"D-YMD[4,2,2]\")\n              } else {}\n            } else {}\n            dsloginfo(\n              ds_string_concat(\"The Final NextRun date will be \", Ans),\n              ProgramName\n            )\n          }\n        case arpFREQ == \"3WD\" =>\n          NextRunDay = oconv(NextRun, \"D-YMD[4,2,2]\")\n          Freqday = oconv(NextRun, \"DWA\")\n          dsloginfo(\n            ds_string_concat(\"The NextRunday Freqday is \", Freqday),\n            ProgramName\n          )\n          dsloginfo(\n            ds_string_concat(\"NextRunDay value is \", NextRunDay),\n            ProgramName\n          )\n          dsu.nextworkingday(thedate, NextRunDay, \"D-YMD[4,2,2]\")\n          WorkYear1 = oconv(thedate, \"D-Y[4]\")\n          dsu.getholidaysuk(HolList, WorkYear1, \"E\")\n          ANS1 = oconv(thedate, \"D-YMD[4,2,2]\")\n          dsloginfo(ds_string_concat(\"ANS1 value is \", ANS1), ProgramName)\n          Ans = oconv(thedate, \"D-YMD[4,2,2]\")\n          if (locate2(thedate, ds_list_semicolon(HolList, bhol))) {\n            intdate = thedate + 1.0\n            ANS2 = oconv(intdate, \"D-YMD[4,2,2]\")\n            dsloginfo(\n              ds_string_concat(\n                ds_string_concat(ds_string_concat(\"ANS2 \", ANS2), \"is \"),\n                ANS2\n              ),\n              ProgramName\n            )\n            Ans = oconv(intdate, \"D-YMD[4,2,2]\")\n            dsu.nextworkingday(thedate2, Ans, \"D-YMD[4,2,2]\")\n            ANS3 = oconv(thedate2, \"D-YMD[4,2,2]\")\n            dsloginfo(\n              ds_string_concat(\n                ds_string_concat(ds_string_concat(\"ANS3 \", ANS3), \"is \"),\n                ANS3\n              ),\n              ProgramName\n            )\n            Ans = oconv(thedate2, \"D-YMD[4,2,2]\")\n            WorkYear1 = oconv(thedate2, \"D-Y[4]\")\n            dsu.getholidaysuk(HolList2, WorkYear1, \"E\")\n            if (locate2(thedate2, ds_list_semicolon(HolList2, bhol2))) {\n              intdate21 = thedate2 + 1.0\n              ANS4 = oconv(intdate21, \"D-YMD[4,2,2]\")\n              dsloginfo(\n                ds_string_concat(\n                  ds_string_concat(ds_string_concat(\"ANS4 \", ANS4), \"is \"),\n                  ANS4\n                ),\n                ProgramName\n              )\n              Ans = oconv(intdate21, \"D-YMD[4,2,2]\")\n            } else {}\n          } else {}\n          NextRunDay = FirstDayCurrentMonth\n          dsloginfo(\n            ds_string_concat(\n              \"NextRunDay value is at the initial level  is \",\n              NextRunDay\n            ),\n            ProgramName\n          )\n          WKDCount = 0.0\n\n          while (ds_not(WKDCount > 3.0)) {\n            dsu.nextworkingday(thedate, NextRunDay, \"D-YMD[4,2,2]\")\n            WorkYear1 = oconv(thedate, \"D-Y[4]\")\n            dsu.getholidaysuk(HolList, WorkYear1, \"E\")\n            ANS5 = oconv(thedate, \"D-YMD[4,2,2]\")\n            dsloginfo(ds_string_concat(\"ANS5 value is \", ANS5), ProgramName)\n            Ans = oconv(thedate, \"D-YMD[4,2,2]\")\n            NextDay = iconv(Ans, \"yyyy-MM-dd\") + 1.0\n            NextRunDay = oconv(NextDay, \"D-YMD[4,2,2]\")\n            if (locate2(thedate, ds_list_semicolon(HolList, bhol))) {\n              intdate = thedate + 1.0\n              Ans = oconv(intdate, \"D-YMD[4,2,2]\")\n              NextDay = iconv(Ans, \"yyyy-MM-dd\") + 1.0\n              NextRunDay = oconv(NextDay, \"D-YMD[4,2,2]\")\n              dsu.nextworkingday(thedate2, Ans, \"D-YMD[4,2,2]\")\n              WorkYear1 = oconv(thedate2, \"D-Y[4]\")\n              dsu.getholidaysuk(HolList2, WorkYear1, \"E\")\n              if (locate2(thedate2, ds_list_semicolon(HolList2, bhol2))) {\n                intdate2 = thedate2 + 1.0\n                Ans = oconv(intdate2, \"D-YMD[4,2,2]\")\n                NextDay = iconv(Ans, \"yyyy-MM-dd\") + 1.0\n                NextRunDay = oconv(NextDay, \"D-YMD[4,2,2]\")\n              } else {}\n            } else {}\n            dsloginfo(\n              ds_string_concat(\n                ds_string_concat(\n                  ds_string_concat(\"NextRunDay value after the \", WKDCount),\n                  \"Iteration is \"\n                ),\n                NextRunDay\n              ),\n              ProgramName\n            )\n            WKDCount = WKDCount + 1.0\n          }\n\n          dsloginfo(\n            ds_string_concat(\n              \"The Final value of ANS5 after the Loop is \",\n              ANS5\n            ),\n            ProgramName\n          )\n          dsloginfo(\n            \"Comparision between ANS1 value with ANS5 value to get the final NextRundate \",\n            ProgramName\n          )\n          if (ANS5 > ANS1) {\n            Ans = ANS1\n          } else {\n            LCDInt = iconv(StartOfMonth, \"yyyy-MM-dd\")\n            FirstNextMonth = oconv(LCDInt, \"yyyy-MM-dd\")\n            dsloginfo(\n              ds_string_concat(\"FirstdayofNextMonth value is \", FirstNextMonth),\n              ProgramName\n            )\n            dsu.nextworkingday(thedate, FirstNextMonth, \"D-YMD[4,2,2]\")\n            WorkYear1 = oconv(thedate, \"D-Y[4]\")\n            dsu.getholidaysuk(HolList, WorkYear1, \"E\")\n            ANS10 = oconv(thedate, \"D-YMD[4,2,2]\")\n            dsloginfo(ds_string_concat(\"ANS10 value is \", ANS10), ProgramName)\n            Ans = oconv(thedate, \"D-YMD[4,2,2]\")\n            if (locate2(thedate, ds_list_semicolon(HolList, bhol))) {\n              intdate = thedate + 1.0\n              ANS11 = oconv(intdate, \"D-YMD[4,2,2]\")\n              dsloginfo(\n                ds_string_concat(\n                  ds_string_concat(ds_string_concat(\"ANS11 \", ANS11), \"is \"),\n                  ANS11\n                ),\n                ProgramName\n              )\n              Ans = oconv(intdate, \"D-YMD[4,2,2]\")\n              dsu.nextworkingday(thedate2, Ans, \"D-YMD[4,2,2]\")\n              ANS12 = oconv(thedate2, \"D-YMD[4,2,2]\")\n              dsloginfo(\n                ds_string_concat(\n                  ds_string_concat(ds_string_concat(\"ANS12 \", ANS12), \"is \"),\n                  ANS12\n                ),\n                ProgramName\n              )\n              Ans = oconv(thedate2, \"D-YMD[4,2,2]\")\n              WorkYear1 = oconv(thedate2, \"D-Y[4]\")\n              dsu.getholidaysuk(HolList2, WorkYear1, \"E\")\n              if (locate2(thedate2, ds_list_semicolon(HolList2, bhol2))) {\n                intdate23 = thedate2 + 1.0\n                ANS13 = oconv(intdate23, \"D-YMD[4,2,2]\")\n                dsloginfo(\n                  ds_string_concat(\n                    ds_string_concat(ds_string_concat(\"ANS13 \", ANS13), \"is \"),\n                    ANS13\n                  ),\n                  ProgramName\n                )\n                Ans = oconv(intdate23, \"D-YMD[4,2,2]\")\n              } else {}\n            } else {}\n            dsloginfo(\n              ds_string_concat(\"The Final NextRun date will be \", Ans),\n              ProgramName\n            )\n          }\n        case arpFREQ == \"FWD\" =>\n          LCDInt = iconv(StartOfMonth, \"yyyy-MM-dd\")\n          FirstNextMonth = oconv(LCDInt, \"yyyy-MM-dd\")\n          dsloginfo(\n            ds_string_concat(\"FirstdayofNextMonth value is \", FirstNextMonth),\n            ProgramName\n          )\n          dsu.nextworkingday(thedate, FirstNextMonth, \"D-YMD[4,2,2]\")\n          WorkYear1 = oconv(thedate, \"D-Y[4]\")\n          dsu.getholidaysuk(HolList, WorkYear1, \"E\")\n          ANS10 = oconv(thedate, \"D-YMD[4,2,2]\")\n          dsloginfo(ds_string_concat(\"ANS10 value is \", ANS10), ProgramName)\n          Ans = oconv(thedate, \"D-YMD[4,2,2]\")\n          if (locate2(thedate, ds_list_semicolon(HolList, bhol))) {\n            intdate = thedate + 1.0\n            ANS11 = oconv(intdate, \"D-YMD[4,2,2]\")\n            dsloginfo(\n              ds_string_concat(\n                ds_string_concat(ds_string_concat(\"ANS11 \", ANS11), \"is \"),\n                ANS11\n              ),\n              ProgramName\n            )\n            Ans = oconv(intdate, \"D-YMD[4,2,2]\")\n            dsu.nextworkingday(thedate2, Ans, \"D-YMD\")\n            ANS12 = oconv(thedate2, \"D-YMD[4,2,2]\")\n            dsloginfo(\n              ds_string_concat(\n                ds_string_concat(ds_string_concat(\"ANS12 \", ANS12), \"is \"),\n                ANS12\n              ),\n              ProgramName\n            )\n            Ans = oconv(thedate2, \"D-YMD[4,2,2]\")\n            WorkYear1 = oconv(thedate2, \"D-Y[4]\")\n            dsu.getholidaysuk(HolList2, WorkYear1, \"E\")\n            if (locate2(thedate2, ds_list_semicolon(HolList2, bhol2))) {\n              intdate23 = thedate2 + 1.0\n              ANS13 = oconv(intdate23, \"D-YMD[4,2,2]\")\n              dsloginfo(\n                ds_string_concat(\n                  ds_string_concat(ds_string_concat(\"ANS13 \", ANS13), \"is \"),\n                  ANS13\n                ),\n                ProgramName\n              )\n              Ans = oconv(intdate23, \"D-YMD[4,2,2]\")\n            } else {}\n          } else {}\n        case arpFREQ == \"HLF\" =>\n          if (arpRUNDATE == ds_string_concat(ThisYear, \"-06-30\")) {\n            NextHalf = ds_string_concat(ThisYear, \"-12-31\")\n          } else NextHalf = ds_string_concat(ThisYear + 1.0, \"-06-30\")\n          Ans = NextHalf\n        case ((datastage_substring(\n              arpFREQ,\n              ds_len(arpFREQ),\n              1.0\n            ) == \"W\") || (datastage_substring(\n              arpFREQ,\n              ds_len(arpFREQ),\n              1.0\n            ) == \"Q\")) && (num(\n              datastage_substring(arpFREQ, 1.0, ds_len(arpFREQ) - 1.0)\n            ) == 1.0) =>\n          WorkingDayToRun =\n            datastage_substring(arpFREQ, 1.0, ds_len(arpFREQ) - 1.0)\n          dsloginfo(\n            ds_string_concat(\"Calculating working day \", WorkingDayToRun),\n            ProgramName\n          )\n          WorkingDayCounter = 0.0\n          if (datastage_substring(arpFREQ, ds_len(arpFREQ), 1.0) == \"Q\") {\n            dteRunDate = StartOfQuarter\n          } else dteRunDate = StartOfMonth\n          intRunDate = iconv(dteRunDate, \"yyyy-MM-dd\")\n          RunYear = datastage_substring(dteRunDate, 1.0, 4.0)\n          dsloginfo(\n            ds_string_concat(\"StartOfMonth is \", dteRunDate),\n            ProgramName\n          )\n          dsu.nextworkingday(intRunDate, dteRunDate, \"D-YMD[4,2,2]\")\n          dteRunDate = oconv(intRunDate, \"yyyy-MM-dd\")\n          dsu.getholidaysuk(HolList, RunYear, \"E\")\n          if (locate2(intRunDate, ds_list_semicolon(HolList, bhol))) {\n            dsloginfo(\n              ds_string_concat(dteRunDate, \"is not a working day\"),\n              ProgramName\n            )\n          } else {\n            WorkingDayCounter = WorkingDayCounter + 1.0\n            dsloginfo(\n              ds_string_concat(\n                ds_string_concat(dteRunDate, \"is working day \"),\n                WorkingDayCounter\n              ),\n              ProgramName\n            )\n          }\n\n          while (ds_not(WorkingDayCounter == WorkingDayToRun)) {\n            intRunDate = intRunDate + 1.0\n            dteRunDate = oconv(intRunDate, \"yyyy-MM-dd\")\n            dsu.nextworkingday(intRunDate, dteRunDate, \"D-YMD[4,2,2]\")\n            dteRunDate = oconv(intRunDate, \"yyyy-MM-dd\")\n            if (locate2(intRunDate, ds_list_semicolon(HolList, bhol))) {\n              dsloginfo(\n                ds_string_concat(dteRunDate, \"is not a working day\"),\n                ProgramName\n              )\n            } else {\n              WorkingDayCounter = WorkingDayCounter + 1.0\n              dsloginfo(\n                ds_string_concat(\n                  ds_string_concat(dteRunDate, \"is working day \"),\n                  WorkingDayCounter\n                ),\n                ProgramName\n              )\n            }\n          }\n\n          dsloginfo(\n            ds_string_concat(\n              ds_string_concat(\n                ds_string_concat(\"Created next run record for \", dteRunDate),\n                \". This is working day \"\n              ),\n              WorkingDayCounter\n            ),\n            ProgramName\n          )\n          Ans = dteRunDate\n        case (ds_len(arpFREQ) == 3.0) && ((((((((datastage_substring(\n              arpFREQ,\n              2.0,\n              2.0\n            ) == \"MO\") || (datastage_substring(\n              arpFREQ,\n              2.0,\n              2.0\n            ) == \"TU\")) || (datastage_substring(\n              arpFREQ,\n              2.0,\n              2.0\n            ) == \"WE\")) || (datastage_substring(\n              arpFREQ,\n              2.0,\n              2.0\n            ) == \"TH\")) || (datastage_substring(\n              arpFREQ,\n              2.0,\n              2.0\n            ) == \"FR\")) || (datastage_substring(\n              arpFREQ,\n              2.0,\n              2.0\n            ) == \"SA\")) || (datastage_substring(\n              arpFREQ,\n              2.0,\n              2.0\n            ) == \"SU\")) && (num(\n              datastage_substring(arpFREQ, 1.0, 1.0)\n            ) == 1.0)) =>\n          DayOfWeek_small = datastage_substring(arpFREQ, 2.0, 2.0)\n          intOccurance = datastage_substring(arpFREQ, 1.0, 1.0)\n\n          CONST_TRUE match {\n            case DayOfWeek_small == \"MO\" =>\n              intDayOfWeek = \"1\"\n            case DayOfWeek_small == \"TU\" =>\n              intDayOfWeek = \"2\"\n            case DayOfWeek_small == \"WE\" =>\n              intDayOfWeek = \"3\"\n            case DayOfWeek_small == \"TH\" =>\n              intDayOfWeek = \"4\"\n            case DayOfWeek_small == \"FR\" =>\n              intDayOfWeek = \"5\"\n            case DayOfWeek_small == \"SA\" =>\n              intDayOfWeek = \"6\"\n            case DayOfWeek_small == \"SU\" =>\n              intDayOfWeek = \"7\"\n\n          }\n\n          dsloginfo(\n            ds_string_concat(\"1st day of Next month is  \", StartOfMonth1),\n            ProgramName\n          )\n          DayOf1stOfMonth = oconv(iconv(StartOfMonth1, \"yyyy-MM-dd\"), \"DW\")\n          if (intDayOfWeek >= DayOf1stOfMonth) {\n            DaysDiff = intDayOfWeek - DayOf1stOfMonth\n          } else DaysDiff = (7.0 + intDayOfWeek) - DayOf1stOfMonth\n          dsloginfo(\n            ds_string_concat(\"1st day of next month is  \", DayOf1stOfMonth),\n            ProgramName\n          )\n          dteRunDate = oconv(\n            (iconv(\n              StartOfMonth1,\n              \"yyyy-MM-dd\"\n            ) + DaysDiff) + (7.0 * (intOccurance - 1.0)),\n            \"yyyy-MM-dd\"\n          )\n          if (intOccurance == \"1\") {\n            ordinalpart = \"st\"\n          } else ordinalpart = \"th\"\n          strDayName = oconv(iconv(dteRunDate, \"yyyy-MM-dd\"), \"DWA\")\n          dsloginfo(\n            ds_string_concat(\n              ds_string_concat(\n                ds_string_concat(\n                  ds_string_concat(\n                    ds_string_concat(\"DaysDiff: \", DaysDiff),\n                    \"intOccurance:\"\n                  ),\n                  intOccurance\n                ),\n                \"DaysToAdd:\"\n              ),\n              intOccurance\n            ),\n            ProgramName\n          )\n          dsloginfo(\n            ds_string_concat(\n              ds_string_concat(\n                ds_string_concat(\n                  ds_string_concat(\n                    ds_string_concat(\n                      ds_string_concat(\"The \", intOccurance),\n                      ordinalpart\n                    ),\n                    \"\"\n                  ),\n                  strDayName\n                ),\n                \"is \"\n              ),\n              dteRunDate\n            ),\n            ProgramName\n          )\n          Ans = dteRunDate\n        case (ds_len(arpFREQ) == 3.0) && ((datastage_substring(\n              arpFREQ,\n              1.0,\n              2.0\n            ) == \"MF\") && (((((datastage_substring(\n              arpFREQ,\n              3.0,\n              1.0\n            ) == \"2\") || (datastage_substring(\n              arpFREQ,\n              3.0,\n              1.0\n            ) == \"3\")) || (datastage_substring(\n              arpFREQ,\n              3.0,\n              1.0\n            ) == \"4\")) || (datastage_substring(\n              arpFREQ,\n              3.0,\n              1.0\n            ) == \"5\")) || (datastage_substring(arpFREQ, 3.0, 1.0) == \"6\"))) =>\n          AdjustDaysSun = \"12345\"\n          AdjustDaysMon = \"01234\"\n          AdjustDaysTue = \"60123\"\n          AdjustDaysWed = \"56012\"\n          AdjustDaysThu = \"45601\"\n          AdjustDaysFri = \"34560\"\n          AdjustDaysSat = \"23456\"\n          DayOfWeek = int(datastage_substring(arpFREQ, 3.0, 1.0)) - 1.0\n          FirstDayOfWeek = datastage_substring(\n            oconv(iconv(StartOfMonth, \"D-YMD[4,2,2]\"), \"DWA\"),\n            1.0,\n            2.0\n          )\n\n          CONST_TRUE match {\n            case FirstDayOfWeek == \"SU\" =>\n              FirstDayOfMonth = iconv(StartOfMonth, \"D-YMD[4,2,2]\") + int(\n                datastage_substring(AdjustDaysSun, DayOfWeek, 1.0)\n              )\n            case FirstDayOfWeek == \"MO\" =>\n              FirstDayOfMonth = iconv(StartOfMonth, \"D-YMD[4,2,2]\") + int(\n                datastage_substring(AdjustDaysMon, DayOfWeek, 1.0)\n              )\n            case FirstDayOfWeek == \"TU\" =>\n              FirstDayOfMonth = iconv(StartOfMonth, \"D-YMD[4,2,2]\") + int(\n                datastage_substring(AdjustDaysTue, DayOfWeek, 1.0)\n              )\n            case FirstDayOfWeek == \"WE\" =>\n              FirstDayOfMonth = iconv(StartOfMonth, \"D-YMD[4,2,2]\") + int(\n                datastage_substring(AdjustDaysWed, DayOfWeek, 1.0)\n              )\n            case FirstDayOfWeek == \"TH\" =>\n              FirstDayOfMonth = iconv(StartOfMonth, \"D-YMD[4,2,2]\") + int(\n                datastage_substring(AdjustDaysThu, DayOfWeek, 1.0)\n              )\n            case FirstDayOfWeek == \"FR\" =>\n              FirstDayOfMonth = iconv(StartOfMonth, \"D-YMD[4,2,2]\") + int(\n                datastage_substring(AdjustDaysFri, DayOfWeek, 1.0)\n              )\n            case FirstDayOfWeek == \"SA\" =>\n              FirstDayOfMonth = iconv(StartOfMonth, \"D-YMD[4,2,2]\") + int(\n                datastage_substring(AdjustDaysSat, DayOfWeek, 1.0)\n              )\n\n          }\n\n          WorkYear1 = oconv(FirstDayOfMonth, \"D-Y[4]\")\n          dsu.getholidaysuk(HolList, WorkYear1, \"E\")\n          NextOrderDay = FirstDayOfMonth\n          IsWorkingDay = false\n\n          while (ds_not(IsWorkingDay)) {\n            if (locate2(NextOrderDay, ds_list_semicolon(HolList, bhol))) {\n              FirstDayOfMonth = FirstDayOfMonth + 1.0\n              dsu.nextworkingday(\n                NextOrderDay,\n                oconv(FirstDayOfMonth, \"D-YMD[4,2,2]\"),\n                \"D-YMD[4,2,2]\"\n              )\n            } else IsWorkingDay = true\n          }\n\n          Ans = oconv(FirstDayOfMonth, \"D-YMD[4,2,2]\")\n\n      }\n\n      Ans\n    }\n    def cleardatasets() = {\n      cmd = \"ls ${UKDWENV}/shareddata/`whoami`/DataSetRemoval.cfg\"\n      dsexecute(\"UNIX\", cmd, ScreenOutput, ReturnCode)\n      Res = ReturnCode\n      if (Res == \"0\") {\n        sFileList = \"\"\n        sExtList = convert3(\",\", Config.FM, \"ds,DS,fs,FS\")\n        (1.0 until convertToInt(\n          dcount(Parameterlist, Config.FM)\n        )).zipWithIndex.map {\n          case (_i, iIndex) =>\n            var i = _i\n            if (Parameterlist(i) == \"pTEMPFILEPATH\") {\n              sFileList(-1.0) =\n                dsgetparaminfo(DSJ.ME, \"pTEMPFILEPATH\", DSJ.PARAMVALUE)\n            } else {}\n            if (Parameterlist(i) == \"pUKDWTEMPFILEPATH\") {\n              sFileList(-1.0) =\n                dsgetparaminfo(DSJ.ME, \"pUKDWTEMPFILEPATH\", DSJ.PARAMVALUE)\n            } else {}\n        }.toArray\n        cmd = \"echo $APT_ORCHHOME\"\n        dsexecute(\"UNIX\", cmd, o1, o2)\n        if (o2) {\n          dslogfatal(\n            ds_string_concat(\n              ds_string_concat(\n                ds_string_concat(\n                  ds_string_concat(\n                    ds_string_concat(\n                      ds_string_concat(\"command \", cmd),\n                      \"returned text \\\"\"\n                    ),\n                    o1\n                  ),\n                  \"\\\" and error code \\\"\"\n                ),\n                o2\n              ),\n              \"\\\"\"\n            ),\n            ProgramName\n          )\n        } else {}\n        sPXEnginePath = convert3(Config.FM, \"\", o1)\n        (1.0 until convertToInt(\n          dcount(sFileList, Config.FM)\n        )).zipWithIndex.map {\n          case (_i, iIndex) =>\n            var i = _i\n            (1.0 until convertToInt(\n              dcount(sExtList, Config.FM)\n            )).zipWithIndex.map {\n              case (_e, eIndex) =>\n                var e = _e\n                sExt = field3(sExtList, Config.FM, e)\n                cmd = ds_string_concat(\n                  ds_string_concat(\n                    ds_string_concat(\n                      ds_string_concat(sPXEnginePath, \"/bin/orchadmin rm \"),\n                      sFileList(i)\n                    ),\n                    \"/*.\"\n                  ),\n                  sExt\n                )\n                dsexecute(\"UNIX\", cmd, o1, o2)\n                if (o2) {\n                  dslogfatal(\n                    ds_string_concat(\n                      ds_string_concat(\n                        ds_string_concat(\n                          ds_string_concat(\n                            ds_string_concat(\n                              ds_string_concat(\"command \", cmd),\n                              \"returned text \\\"\"\n                            ),\n                            o1\n                          ),\n                          \"\\\" and error code \\\"\"\n                        ),\n                        o2\n                      ),\n                      \"\\\"\"\n                    ),\n                    ProgramName\n                  )\n                } else {}\n                dsloginfo(\n                  ds_string_concat(\n                    ds_string_concat(\n                      ds_string_concat(\n                        ds_string_concat(\n                          ds_string_concat(\n                            ds_string_concat(\"command \", cmd),\n                            \"returned text \\\"\"\n                          ),\n                          o1\n                        ),\n                        \"\\\" and error code \\\"\"\n                      ),\n                      o2\n                    ),\n                    \"\\\"\"\n                  ),\n                  ProgramName\n                )\n            }.toArray\n        }.toArray\n        o1\n      } else {}\n      Ans\n    }\n    Parameterlist = change(dsgetjobinfo(DSJ.ME, DSJ.PARAMLIST), \",\", Config.FM)\n    cleardatasets()\n    Counter = 1.0\n\n    while (ds_not(Counter > 8.0)) {\n      Curparam = Parameterlist(Counter)\n\n      CONST_TRUE match {\n        case Counter == 1.0 =>\n          arpDWDBNAME = dsgetparaminfo(DSJ.ME, \"pUKDWDATABASE\", DSJ.PARAMVALUE)\n        case Counter == 2.0 =>\n          arpUSER = dsgetparaminfo(DSJ.ME, \"pUKDWUSERNAME\", DSJ.PARAMVALUE)\n        case Counter == 3.0 =>\n          arpPASSWD = dsgetparaminfo(DSJ.ME, \"pUKDWPASSWORD\", DSJ.PARAMVALUE)\n        case Counter == 4.0 =>\n          arpSCHEMA = dsgetparaminfo(DSJ.ME, \"pUKDWSCHEMA\", DSJ.PARAMVALUE)\n        case Counter == 5.0 =>\n          arpRUNID = dsgetparaminfo(DSJ.ME, \"pUKDWCJOBRUNID\", DSJ.PARAMVALUE)\n        case Counter == 6.0 =>\n          arpRRUNID = dsgetparaminfo(DSJ.ME, \"pUKDWCJOBRRUNID\", DSJ.PARAMVALUE)\n        case Counter == 7.0 =>\n          arpRUNDATE = dsgetparaminfo(DSJ.ME, \"pUKDWDATADATE\", DSJ.PARAMVALUE)\n        case Counter == 8.0 =>\n          arpFREQ = dsgetparaminfo(DSJ.ME, \"pUKDWCJOBRUNFREQ\", DSJ.PARAMVALUE)\n\n      }\n\n      Counter = Counter + 1.0\n    }\n\n    CurDate = timedate()\n    CurHrs = datastage_substring(CurDate, 1.0, 2.0)\n    CurMins = datastage_substring(CurDate, 4.0, 2.0)\n    CurSecs = datastage_substring(CurDate, 7.0, 2.0)\n    CurTimeStr = ds_string_concat(\n      ds_string_concat(\n        ds_string_concat(ds_string_concat(CurHrs, \".\"), CurMins),\n        \".\"\n      ),\n      CurSecs\n    )\n    CurDateStr = field(CurDate, \"\", 2.0, 3.0)\n    CurDateReformat = oconv(iconv(CurDateStr, \"D\"), \"yyyy-MM-dd\")\n    EndTimeStamp = ds_string_concat(\n      ds_string_concat(ds_string_concat(CurDateReformat, \"-\"), CurTimeStr),\n      \".000000\"\n    )\n    sNextLine = ds_char(10.0)\n    sLOGIN = \"bteq <<EOF\"\n    sLOGIN = ds_string_concat(sLOGIN, sNextLine)\n    sLOGIN = ds_string_concat(\n      sLOGIN,\n      ds_string_concat(\n        ds_string_concat(\n          ds_string_concat(\n            ds_string_concat(\n              ds_string_concat(ds_string_concat(\".logon \", arpSCHEMA), \"/\"),\n              arpUSER\n            ),\n            \",\"\n          ),\n          arpPASSWD\n        ),\n        \";\"\n      )\n    )\n    sLOGIN = ds_string_concat(sLOGIN, sNextLine)\n    sEXIT = sNextLine\n    sEXIT = ds_string_concat(sEXIT, \".exit;\")\n    sEXIT = ds_string_concat(sEXIT, sNextLine)\n    sEXIT = ds_string_concat(sEXIT, \"EOF\")\n    sEXIT = ds_string_concat(sEXIT, sNextLine)\n    sSQL = sLOGIN\n    sSQL = ds_string_concat(sSQL, \".set RECORDMODE off;\")\n    sSQL = ds_string_concat(sSQL, sNextLine)\n    sSQL = ds_string_concat(\n      sSQL,\n      ds_string_concat(\n        ds_string_concat(\n          ds_string_concat(\n            ds_string_concat(\n              ds_string_concat(\n                ds_string_concat(\n                  ds_string_concat(\n                    ds_string_concat(\n                      ds_string_concat(\n                        ds_string_concat(\n                          ds_string_concat(\n                            ds_string_concat(\n                              ds_string_concat(\n                                \"update DWH_DS_CNTL_RUN set CNTL_JOB_RUN_STA = '4', CNTL_JOB_END_TS = \",\n                                \"'\"\n                              ),\n                              EndTimeStamp\n                            ),\n                            \"'\"\n                          ),\n                          \"where DS_CNTL_JOB = \"\n                        ),\n                        \"'\"\n                      ),\n                      JobName\n                    ),\n                    \"'\"\n                  ),\n                  \"and CNTL_JOB_RUN_DT = \"\n                ),\n                \"'\"\n              ),\n              arpRUNDATE\n            ),\n            \"' and CNTL_JOB_RUN_ID = \"\n          ),\n          arpRUNID\n        ),\n        \"and CNTL_JOB_RUN_STA = '2' \"\n      )\n    )\n    sSQL = ds_string_concat(sSQL, \";\")\n    sSQL = ds_string_concat(sSQL, sNextLine)\n    sSQL = ds_string_concat(sSQL, sEXIT)\n    Cmd = sSQL\n    dsexecute(\"UNIX\", Cmd, OsOutput, OsStatus)\n    if (OsStatus != 0.0) {\n      dslogfatal(\n        ds_string_concat(\n          \"Failed to Update Run Table in post process job \",\n          OsStatus\n        ),\n        DSJ.ME\n      )\n    } else {}\n    newrec()\n    dsloginfo(\n      ds_string_concat(\n        ds_string_concat(\n          ds_string_concat(\n            ds_string_concat(\n              ds_string_concat(\n                \"Post Processing Routine: Frequency is \",\n                arpFREQ\n              ),\n              \",the next run date is \"\n            ),\n            Ans\n          ),\n          \"and the month-day is \"\n        ),\n        oconv(arpRUNDATE, \"MM-dd\")\n      ),\n      DSJ.ME\n    )\n    if (Ans != \"Y\") {\n      NewSeq = arpRUNID + 1.0\n      sSQL = sLOGIN\n      sSQL = ds_string_concat(sSQL, \".set RECORDMODE off;\")\n      sSQL = ds_string_concat(sSQL, sNextLine)\n      sSQL = ds_string_concat(\n        sSQL,\n        ds_string_concat(\n          ds_string_concat(\n            ds_string_concat(\n              ds_string_concat(\n                ds_string_concat(\n                  ds_string_concat(\n                    ds_string_concat(\n                      ds_string_concat(\n                        ds_string_concat(\n                          ds_string_concat(\n                            ds_string_concat(\n                              ds_string_concat(\n                                ds_string_concat(\n                                  ds_string_concat(\n                                    ds_string_concat(\n                                      ds_string_concat(\n                                        ds_string_concat(\n                                          \"insert into DWH_DS_CNTL_RUN (DS_CNTL_JOB, CNTL_JOB_RUN_ID, CNTL_JOB_RRUN_ID, CNTL_JOB_RUN_DT, CNTL_JOB_RUN_PRM, CNTL_JOB_RUN_STA) values (\",\n                                          \"'\"\n                                        ),\n                                        JobName\n                                      ),\n                                      \"' ,\"\n                                    ),\n                                    NewSeq\n                                  ),\n                                  \",\"\n                                ),\n                                \"0, \"\n                              ),\n                              \"'\"\n                            ),\n                            Ans\n                          ),\n                          \"' ,\"\n                        ),\n                        \"'\"\n                      ),\n                      1.0\n                    ),\n                    \"' ,\"\n                  ),\n                  \"'\"\n                ),\n                1.0\n              ),\n              \"'\"\n            ),\n            \")\"\n          ),\n          \";\"\n        )\n      )\n      sSQL = ds_string_concat(sSQL, sNextLine)\n      sSQL = ds_string_concat(sSQL, sEXIT)\n      Cmd = sSQL\n      dsexecute(\"UNIX\", Cmd, OsOutput, OsStatus)\n      if (OsStatus != 0.0) {\n        dslogfatal(\n          ds_string_concat(\n            ds_string_concat(\n              ds_string_concat(\n                \"Failed to Insert new record into Run Table in post process job \",\n                OsStatus\n              ),\n              \"\"\n            ),\n            sSQL\n          ),\n          DSJ.ME\n        )\n      } else {}\n      dsloginfo(\"Post Processing Routine Finished \", DSJ.ME)\n    } else {}\n    Ans = 0.0\n    Ans\n  })\n}"}